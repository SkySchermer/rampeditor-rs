// The MIT License (MIT)
// 
// Copyright (c) 2017 Skylor R. Schermer
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in 
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
//
////////////////////////////////////////////////////////////////////////////////
//!
//! The `expression` module provides functionality for implementing 
//! color-expressions, which describe relationships and operations on colors in
//! terms of an expression grammar and abstract syntax tree.
//!
////////////////////////////////////////////////////////////////////////////////

// Non-local imports.
use color::Color;

// Standard imports.
use std::fmt;



////////////////////////////////////////////////////////////////////////////////
// Expression
////////////////////////////////////////////////////////////////////////////////
/// An AST in the color-expression grammar.
#[derive(Clone, Copy)]
pub enum Expression {
	/// A pure color.
	Color(Color)
}


impl Expression {
	/// Returns the `Color` generated by the expression.
	pub fn color(&self) -> Option<Color> {
		None
	}
}


impl fmt::Debug for Expression {
	fn fmt(&self, f: &mut fmt::Formatter) -> Result<(), fmt::Error> {
		match self {
			&Expression::Color(ref color) => 
				write!(f, "Expression::Color({:?})", color),
		}
	}
}


impl Default for Expression {
	fn default() -> Self {
		Expression::Color(Default::default())
	}
}