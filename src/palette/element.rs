// The MIT License (MIT)
// 
// Copyright (c) 2016 Skylor R. Schermer
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in 
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

//! Defines elements, which encapsulates the component of a Palette that is
//! needed to provide a single color.
use color::Color;

use std::cell::RefCell;
use std::rc::Rc;
use std::fmt;

/// A wrapper for ColorElement to enable building them into mutable tree 
/// structures. Acts as a slot for a color element in the palette.
pub type PaletteSlot = Rc<RefCell<ColorElement>>;




/// Encapsulates a Palette component for generating a single color.
pub enum ColorElement {
	/// An element with no dependencies. Generates the given color.
	ZerothOrder {
		/// The color to be generated by the ColorElement.
		color: Color
	},

	/// An element with a single dependency. Generates a color from another.
	FirstOrder {
		/// The function that builds the color from its dependencies.
		build: Box<Fn(&ColorElement) -> Color>,
		/// The PaletteSlot to use for building a color.
		parent: PaletteSlot,
	},

	/// An element with two dependencies. Generates a color from two others.
	SecondOrder {
		/// The function that builds the color from its dependencies.
		build: Box<Fn(&ColorElement, &ColorElement) -> Color>,
		/// The PaletteSlots to use for building a color.
		parents: (PaletteSlot, PaletteSlot),
	},
}


impl ColorElement {
	/// Returns the Color generated by the ColorElement.
	pub fn get_color(&self) -> Color {
		match *self {
			ColorElement::ZerothOrder {color} 
				=> color,

			ColorElement::FirstOrder {ref build, ref parent} 
				=> build(&*parent.borrow()),

			ColorElement::SecondOrder {ref build, ref parents}
				=> build(&*parents.0.borrow(), &*parents.1.borrow())
		}
	}

	/// Returns the element's dependency order.
	pub fn get_order(&self) -> u8 {
		match self {
			&ColorElement::ZerothOrder {..} => 0,
			&ColorElement::FirstOrder {..} => 1,
			&ColorElement::SecondOrder {..} => 2
		}
	}
}


impl fmt::Debug for ColorElement {
	fn fmt(&self, f: &mut fmt::Formatter) -> Result<(), fmt::Error> {
		match *self {
			ColorElement::ZerothOrder {ref color} 
				=> write!(f, 
					"ColorElement::ZerothOrder {{ color: {:?} }}", 
					color),

			ColorElement::FirstOrder {ref parent, ..} 
				=> write!(f, 
					"ColorElement::FirstOrder {{ parent: {:?}, build: {:?} }}", 
					parent, 
					self.get_color()),

			ColorElement::SecondOrder {ref parents, ..} 	
				=> write!(f, 
					"ColorElement::SecondOrder {{ parents: {:?}, build: {:?} }}", 
					parents, 
					self.get_color()),
		}
	}
}

impl Default for ColorElement {
	fn default() -> Self {
		ColorElement::ZerothOrder {color: Default::default()}
	}
}