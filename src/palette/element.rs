// The MIT License (MIT)
// 
// Copyright (c) 2016 Skylor R. Schermer
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in 
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
//
////////////////////////////////////////////////////////////////////////////////
//!
//! Defines elements, which encapsulates the component of a Palette that is
//! needed to provide a single color.
//!
////////////////////////////////////////////////////////////////////////////////
use color::Color;

use std::cell::RefCell;
use std::ops::{Deref, DerefMut};
use std::rc::Weak;
use std::fmt;


/// A wrapper around a `ColorElement` for enabling interior mutability.
#[derive(Debug)]
pub struct Slot {
	/// The `ColorElement` being wrapped.
	color_element: RefCell<ColorElement>,
}


impl Slot {
	/// Creates a new `Slot` wrapping the given `ColorElement`.
	pub fn new(element: ColorElement) -> Self {
		Slot {
			color_element: RefCell::new(element),
		}
	}

	/// Returns the `Color` of the internal `ColorElement`, or `None` if it is 
	/// invalid.
	pub fn get_color(&self) -> Option<Color> {
		self.color_element.borrow().get_color()
	}

	/// Returns the order of the internal `ColorElement`.
	pub fn get_order(&self) -> usize {
		self.color_element.borrow().get_order()
	}
}


impl Deref for Slot {
	type Target = RefCell<ColorElement>;
	fn deref(&self) -> &Self::Target {
		&self.color_element
	}
}


impl DerefMut for Slot {
	fn deref_mut(&mut self) -> &mut Self::Target {
		&mut self.color_element
	}
}


/// Encapsulates a `Palette` component for generating a single `Color`.
pub enum ColorElement {
	/// An element with no dependencies. Generates the given `Color`.
	Pure {
		/// The color to be generated by the ColorElement.
		color: Color
	},

	/// An element with a single dependency. Generates a color from another.
	Mixed {
		/// The function that mixes the color from its dependencies.
		mix: Box<Fn(Vec<Color>) -> Color>,
		/// The `Slot`s to use for mixing a color.
		sources: Vec<Weak<Slot>>,
 	},

}


impl ColorElement {
	/// Returns the Color generated by the ColorElement.
	pub fn get_color(&self) -> Option<Color> {
		match self {
			&ColorElement::Pure {color} => Some(color),

			&ColorElement::Mixed {ref mix, ref sources} => {
				// Package up color references into a Vec<Color> for the mix 
				// function.
				let mut slots = sources
					.iter()
					.map(|weak_slot| weak_slot.upgrade());
				if slots.any(|opt_slot| opt_slot.is_none()) {return None};
				let colors = sources
					.iter()
					.map(|weak_slot| weak_slot
					.upgrade()
					.expect("mix slot filter")
					.get_color()
					.expect("no color in valid slot")
				).collect::<Vec<_>>();
				Some(mix(colors))
			}
		}
	}

	/// Returns the element's dependency order.
	pub fn get_order(&self) -> usize {
		match self {
			&ColorElement::Pure {..} => 0,
			&ColorElement::Mixed {ref sources, ..} => sources.len(),
		}
	}
}


impl fmt::Debug for ColorElement {
	fn fmt(&self, f: &mut fmt::Formatter) -> Result<(), fmt::Error> {
		match self {
			&ColorElement::Pure {ref color} => 
				write!(f, 
					"ColorElement::Pure {{ color: {:?} }}", 
					color),

			&ColorElement::Mixed {ref sources, ..} =>
				write!(f, 
					"ColorElement::Mixed {{ sources: ({}), mix: {:?} }}", 
					sources.len(), 
					self.get_color()),
		}
	}
}


impl Default for ColorElement {
	fn default() -> Self {
		ColorElement::Pure {color: Default::default()}
	}
}